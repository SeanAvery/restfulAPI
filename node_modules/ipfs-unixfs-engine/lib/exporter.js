'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var debug = require('debug');
var log = debug('exporter');
log.err = debug('exporter:error');
var UnixFS = require('ipfs-unixfs');
var series = require('run-series');
var async = require('async');
var Readable = require('readable-stream').Readable;
var pathj = require('path');
var util = require('util');

exports = module.exports = Exporter;

util.inherits(Exporter, Readable);

function Exporter(hash, dagService, options) {
  var _this = this;

  if (!(this instanceof Exporter)) {
    return new Exporter(hash, dagService, options);
  }

  Readable.call(this, { objectMode: true });

  this.options = options || {};

  this._read = function (n) {};

  var fileExporter = function fileExporter(node, name, callback) {
    var init = void 0;

    if (!callback) {
      callback = function noop() {};
    }

    var rs = new Readable();
    if (node.links.length === 0) {
      var _ret = function () {
        var unmarshaledData = UnixFS.unmarshal(node.data);
        init = false;
        rs._read = function () {
          if (init) {
            return;
          }
          init = true;
          rs.push(unmarshaledData.data);
          rs.push(null);
        };
        _this.push({ content: rs, path: name });
        callback();
        return {
          v: void 0
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } else {
      init = false;
      rs._read = function () {
        if (init) {
          return;
        }
        init = true;

        var array = node.links.map(function (link) {
          return function (cb) {
            dagService.get(link.hash, function (err, res) {
              if (err) {
                cb(err);
              }
              var unmarshaledData = UnixFS.unmarshal(res.data);
              rs.push(unmarshaledData.data);
              cb();
            });
          };
        });
        series(array, function (err, res) {
          if (err) {
            callback();
            return;
          }
          rs.push(null);
          callback();
          return;
        });
      };
      _this.push({ content: rs, path: name });
      callback();
      return;
    }
  };

  var dirExporter = function dirExporter(node, name, callback) {
    var init = void 0;

    if (!callback) {
      callback = function noop() {};
    }

    var rs = new Readable();
    if (node.links.length === 0) {
      init = false;
      rs._read = function () {
        if (init) {
          return;
        }
        init = true;
        rs.push(node.data);
        rs.push(null);
      };
      _this.push({ content: null, path: name });
      callback();
      return;
    } else {
      async.forEachSeries(node.links, function (link, callback) {
        dagService.get(link.hash, function (err, res) {
          if (err) {
            callback(err);
          }
          var unmarshaledData = UnixFS.unmarshal(res.data);
          if (unmarshaledData.type === 'file') {
            return fileExporter(res, pathj.join(name, link.name), callback);
          }
          if (unmarshaledData.type === 'directory') {
            return dirExporter(res, pathj.join(name, link.name), callback);
          }
          callback();
        });
      }, function (err) {
        if (err) {
          callback();
          return;
        }
        callback();
        return;
      });
    }
  };

  dagService.get(hash, function (err, fetchedNode) {
    if (err) {
      _this.emit('error', err);
      return;
    }
    var data = UnixFS.unmarshal(fetchedNode.data);
    var type = data.type;

    if (type === 'directory') {
      dirExporter(fetchedNode, hash);
    }
    if (type === 'file') {
      fileExporter(fetchedNode, hash);
    }
  });

  return this;
}