'use strict';

var Block = require('ipfs-block');

exports = module.exports = Batch;

// Batch is to defer writes
function Batch(ds, max) {
  var _this = this;

  if (!ds) {
    throw Error('Invalid DAG Service');
  }
  this.dagService = ds;
  this.blocks = [];
  this.size = 0;
  this.maxSize = max || 0;

  this.add = function (node, cb) {
    if (!node) {
      return cb('Node is invalid');
    }

    var data = node.encoded();

    if (!data) {
      return cb('Node is unencoded');
    }
    _this.size += data.length;
    var block = new Block(data);
    _this.blocks.push(block);
    if (_this.size > _this.maxSize) {
      _this.commit(cb, block.key);
    } else {
      cb(null, block.key);
    }
  };
  this.commit = function (cb, key) {
    var self = _this;
    _this.dagService.blocks().addBlocks(_this.blocks, function (err) {
      if (err) {
        return cb(err);
      }
      self.blocks = [];
      self.size = 0;
      cb(null, key);
    });
  };
}